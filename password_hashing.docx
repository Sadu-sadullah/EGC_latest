Password Security Mechanisms and Storage Documentation
This document outlines the mechanisms used for securing passwords in the application, including how passwords are hashed, verified, and stored.

1. Password Hashing
Mechanism: password_hash()

Purpose: Securely hash passwords before storing them in the database.

Algorithm: Uses the bcrypt algorithm by default, which is currently one of the most secure hashing algorithms for passwords.

Key Features:

Automatically generates a unique salt for each password, making it resistant to rainbow table attacks.

Allows customization of the computational cost (e.g., cost => 12), which increases the time required to hash passwords, making brute-force attacks more difficult.

Uses PASSWORD_DEFAULT, ensuring the algorithm will be updated to a stronger one in future PHP versions.

2. Password Verification
Mechanism: password_verify()

Purpose: Verify if a plain-text password matches the hashed password stored in the database.

How It Works:

Extracts the salt and algorithm from the stored hash.

Rehashes the plain-text password using the same salt and algorithm.

Compares the newly generated hash with the stored hash.

3. Password Complexity Validation
Mechanism: Regular Expressions

Purpose: Enforce strong password policies and ensure that passwords meet complexity requirements.

Rules:

At least one uppercase letter.

At least one number.

At least one special character.

Minimum length of 8 characters.

4. Password Reset Security
Mechanism: Current Password Check

Purpose: Ensure that the new password is not the same as the current password.

Implementation:

Fetch the current hashed password from the database.

Use password_verify() to compare the new password with the current password.

5. Secure Storage in the Database
Mechanism: Database Column for Hashed Passwords

Purpose: Store hashed passwords securely.

Implementation:

The users table has a password column of type VARCHAR(255) to store the hashed password.

Best Practices:

Never store plain-text passwords in the database.

Ensure the database is secured with proper access controls and encryption.